#!/usr/bin/env node
// tslint:disable
'use_strict'
/**
 * Module dependencies.
 */
require('babel-register')
require('babel-polyfill')

var cluster = require('cluster')
var os = require('os')

const log = console.log
let workers = []

/**
 * Setup number of worker processes to share port which will be defined while setting up server
 */
const setupWorkerProcesses = () => {
  // to read number of cores on system
  let numCores = os.cpus().length
  log('Master cluster setting up ' + numCores + ' workers')

  // iterate on number of cores need to be utilized by an application
  // current example will utilize all of them
  for (let i = 0; i < numCores; i++) {
    // creating workers and pushing reference in an array
    // these references can be used to receive messages from workers
    workers.push(cluster.fork())

    // to receive messages from worker process
    workers[i].on('message', function (message) {
      log(message)
    })
  }

  // process is clustered on a core and process id is assigned
  cluster.on('online', function (worker) {
    log('Worker ' + worker.process.pid + ' is listening')
  })

  // if any of the worker process dies then start a new one by simply forking another one
  cluster.on('exit', function (worker, code, signal) {
    log(
      'Worker ' +
        worker.process.pid +
        ' died with code: ' +
        code +
        ', and signal: ' +
        signal
    )
    log('Starting a new worker')
    cluster.fork()
    workers.push(cluster.fork())
    // to receive messages from worker process
    workers[workers.length - 1].on('message', function (message) {
      log(message)
    })
  })
}

if (cluster.isMaster) {
  setupWorkerProcesses()
  // const cpus = os.cpus()

  // // Create a worker for each CPU
  // for (let index = 0; index < cpus.length; index += 1) {
  //   cluster.fork()
  // }

  // cluster.on('listening', function (worker) {
  //   log('Cluster %d connected', worker.process.pid)
  // })
  // cluster.on('disconnect', function (worker) {
  //   log('Cluster %d disconnected', worker.process.pid)
  // })
  // cluster.on('exit', function (worker) {
  //   log('Cluster %d is dead', worker.process.pid)
  //   // Ensuring a new cluster will start if an old one dies
  //   cluster.fork()
  // })
} else {
  require('../main')
}
